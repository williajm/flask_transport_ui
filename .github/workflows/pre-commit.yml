name: CI Pipeline

on:
  pull_request:
  push:
    branches: [main]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pre-commit isort black flake8

      - name: Run pre-commit hooks
        id: pre-commit
        run: |
          pre-commit run --all-files || true

      - name: Check for changes
        id: git-check
        run: |
          git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.git-check.outputs.changes == 'true' && github.event_name == 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "Auto-format code with pre-commit hooks [skip ci]"
          git push

      - name: Fail if changes were made on main branch
        if: steps.git-check.outputs.changes == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Code formatting issues found on main branch. Please run 'pre-commit run --all-files' locally."
          exit 1

  test:
    runs-on: ubuntu-latest
    needs: pre-commit

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run unit tests with coverage
        run: |
          python -m pytest -vv --cov=transport/ --cov-report=term --cov-report=xml tests/unit

      - name: Build Docker image
        run: docker build . -t ftu

      - name: Start test server with docker-compose
        run: docker-compose up -d

      - name: Wait for server to be ready
        run: |
          echo "Waiting for server to start..."
          sleep 10
          curl --retry 10 --retry-delay 2 --retry-connrefused http://localhost:5000/ || (docker-compose logs && exit 1)

      - name: Run integration tests
        run: |
          python -m pytest -vv tests/integration

      - name: Install Chrome dependencies for Selenium
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver

      - name: Run Selenium UI tests
        run: |
          behave tests/ui/
        env:
          CI: true

      - name: Stop docker-compose
        if: always()
        run: docker-compose down

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: |
            docker-compose.yml
          retention-days: 5
